{
  "name": "mind",
  "version": "0.0.1",
  "description": "mind is lightweight asynchronous persistence layer for node",
  "main": "index.js",
  "homepage": "https://github.com/sehrgut/node-mind",
  "directories": {
    "test": "test",
    "lib": "lib"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sehrgut/node-mind.git"
  },
  "bugs": {
    "url": "https://github.com/sehrgut/node-mind/issues"
  },
  "keywords": [
    "persistence",
    "database",
    "nosql",
    "util"
  ],
  "author": {
    "name": "Keith Beckman",
    "email": "kbeckman@becknet.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "8f1b438a35cff788a68440fa481466f9d0c9fac1",
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "latest",
    "temp": "~0.5.1"
  },
  "readme": "node-mind\r\n=========\r\n**mind is not a database** / **minimal database** is lightweight asynchronous\r\npersistence layer for node.\r\n\r\n**mind** was inspired by [anti-db][1]'s idea that often, \"you don't need a\r\ndatabase, you need an in-memory object that saves itself to disk\". However, I\r\nneeded Windows support, evented API, and asynchronous loading, which, while\r\nsimpler and more elegant in implementation, it forgoes.\r\n\r\n## Install\r\n\tnpm install mind\r\n\r\n## Features\r\n* Evented API, as well as a simplified single-callback wrapper\r\n* Automatically persists database state\r\n\t* Autosave at intervals, and at `process.exit()`;\r\n\t* On non-Windows systems, also autosave on `SIGINT`, `SIGHUP`, and\r\n\t`SIGQUIT`.\r\n* Database autocreation\r\n\r\n## Usage\r\n\r\n### Evented API\r\n```js\r\nvar mind = require('mind');\r\n\r\nvar opts = { encoding: 'UTF-8', autosave: 60000 };\r\nvar dbm = new mind('path/to/db.json', opts);\r\n\r\ndbm.on('open', function (e) {\r\n\tconsole.log('[INFO] Opened db: ' + e.msg);\r\n\te.db['foo'] = 'bar';\r\n\te.db['baz'] = [1, 2, 3, 4];\r\n});\r\n\r\ndbm.on('close', function (e) {\r\n\tconsole.log('[INFO] Closed db: ' + e.msg);\r\n});\r\n\r\ndbm.on('save', function (e) {\r\n\tconsole.log('[INFO] Saved db: ' + e.msg);\r\n});\r\n\r\ndbm.on('error', function (e) {\r\n\tconsole.error('[ERROR] Error in db: ' + e.msg);\r\n\tconsole.error(e.error);\r\n});\r\n\r\ndbm.open();\r\n```\r\n\r\n### Callback API\r\n```js\r\nvar mind = require('mind');\r\n\r\nmind.open('path/to/db.json', function (err, db, data) {\r\n}, \r\n```\r\n\r\n## API\r\n\r\n### Class: MindManager\r\n\r\n##### new MindManager(fn, opts)\r\n* `fn`: String - Path writeable by the node process\r\n* `opts`: Object - Options hash containing any of:\r\n\t* `autosave`: Number - ms between save operations (0 or negative disables\r\n\tautosave). Default: `60000`\r\n\t* `encoding`: String - encoding used to read and write JSON file. Default:\r\n\t`'UTF-8'`\r\n\r\nCreate a new `MindManager`.\r\n\t\r\n##### manager.open()\r\n* Emits `open` on success.\r\n\r\nOpen and read the database file, creating it if necessary.\r\n\r\n##### manager.save()\r\n* Emits `save` on success.\r\n\r\nAsynchronously save the database file to disk.\r\n\r\n##### manager.close()\r\n* Emits `close` on success.\r\n\r\nSynchronously closes the database file, persisting it to disk. This function\r\nis synchronous to support non-autosaved use of **mind**, and is suitable for\r\ncalling within `process.exit`.\r\n\r\n##### manager.startAutosave() / manager.stopAutosave()\r\n\r\nSynchronously start and stop the autosave process.\r\n\r\n##### MindManager.getManager(db)\r\n* `db`: Object - Database object for which to get the associated `MindManager`\r\n\r\nGet the MindManager for a particular database object.\r\n\r\n##### MindManager.open(fn, cb(err, db, data), opts)\r\n* `fn`: see `new MindManager`\r\n* `opts`: see `new MindManager`\r\n* `cb`: Callback used to respond to all events emitted by the created manager:\r\n\t* `open`: passes `db` as the new database object\r\n\t* `error`: passes `err` as original error thrown, and \r\n\t* `open`, `save`, `close`, `error`: passes `data` as the complete event data object\r\n\r\nHandles the creation of a manager object in a simplified single-callback\r\nmodel. It is recommended to not `bind` your callback to any particular context\r\nso you can access the manager instance at `this`. If you must, though,\r\nthe instance managing a particular db object can be accessed by:\r\n\r\n```js\r\nmind.getManager(db)\r\n```\r\n\r\n\r\n#### Events\r\n\r\n##### open(event)\r\n`event.db`: The database object opened.\r\n`event.msg`: Any message regarding the open operation.\r\n\r\nEmitted on successful opening of a database.\r\n\r\n##### close(event)\r\n`event.msg`: Any message regarding the close operation.\r\n\r\nEmitted on successful closing of a database.\r\n\r\n##### save(event)\r\n`event.msg`: Any message regarding the save operation.\r\n\r\nEmitted on successful save of a database to persistent storage, either\r\nexplicitly-initiated or autosave.\r\n\r\n##### error(event)\r\n`event.error`: The originally-thrown error, if available.\r\n`event.msg`: Any message regarding the error.\r\n\r\nEmitted on any non-fatal caught error.\r\n\r\n[1]: http://github.com/dpweb/anti-db\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "_id": "mind@0.0.1",
  "dist": {
    "shasum": "7de81335069e3a9f5efdea75959a54984b0e1244"
  },
  "_from": "mind@*"
}
